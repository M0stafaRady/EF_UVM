
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[0;33m
NC=\033[0m # No Color
NUM_ITERATIONS := 3
UVM_PY_DIR = $(PWD)
GRANDPARENT_DIR:="$(shell cd ../../; pwd)"
DOCKER_IMAGE = efabless/dv:cocotb
DOCKER_COCOTB_LIB_DIR := $(shell docker run --rm efabless/dv:cocotb cocotb-config --lib-dir)

# Target to run a single test
define RUN_TEST_TEMPLATE
run_$(1):
	@echo "Running test: $(1) with tag: $(SIM_TAG) $(DOCKER_COCOTB_LIB_DIR)"
	@mkdir -p $(SIM_PATH)/compilation
	@mkdir -p $(SIM_PATH)/$(1)
	@if [ ! -f "$(SIM_PATH)/compilation/sim.vvp" ]; then \
        echo "Compiling since sim.vvp does not exist..."; \
        docker run --rm --init -it --sig-proxy=true\
		-v "$(GRANDPARENT_DIR)":"$(GRANDPARENT_DIR)" \
		-e RTL_MACROS="$(RTL_MACROS)" \
		-e VERILOG_SOURCES="$(VERILOG_SOURCES)" \
		-e SIM_PATH="$(SIM_PATH)" \
		-e UVM_PY_DIR="$(UVM_PY_DIR)" \
		-u $(id -u $USER):$(id -g $USER)\
		efabless/dv:cocotb /bin/sh -ec "cd $(UVM_PY_DIR) && iverilog -g2012 -Ttyp $(RTL_MACROS) $(VERILOG_SOURCES) -o $(SIM_PATH)/compilation/sim.vvp -s top"; \
    fi
	@$(MAKE) create_top_py UVM_TEST=$(1)
	@docker run --rm \
	-v "$(GRANDPARENT_DIR)":"$(GRANDPARENT_DIR)" \
	-e SIM_PATH="$(SIM_PATH)" \
	-e PYTHONIOENCODING=utf-8 \
	-e LANG=C.UTF-8 -e LC_ALL=C.UTF-8 \
	efabless/dv:cocotb /bin/sh -c "cd $(SIM_PATH)/$(1) &&  MODULE=top_module vvp -M $(DOCKER_COCOTB_LIB_DIR) -m libcocotbvpi_icarus $(SIM_PATH)/compilation/sim.vvp +UVM_TESTNAME=$(1) +TEST_PATH=$(SIM_PATH)/$(1) +YAML_FILE=$(YAML_FILE) COCOTB_RESULTS_FILE=$(SIM_PATH)/$(1)/results.xml > $(SIM_PATH)/$(1)/test.log 2>&1"
	@echo "Checking test results..."
	@if grep -q "UVM TEST FAIL" $(SIM_PATH)/$(1)/test.log; then \
		echo "Test Failed" > $(SIM_PATH)/$(1)/failed; \
		echo "$$(RED)Test $(1) Failed$$(NC)" ; \
	elif grep -q "UVM TEST PASSED" $(SIM_PATH)/$(1)/test.log; then \
		echo "Test Passed" > $(SIM_PATH)/$(1)/passed; \
		echo "$$(GREEN)Test $(1) Passed$$(NC)" ; \
	else \
		echo "Test Result Unknown" > $(SIM_PATH)/$(1)/unknown; \
		echo "$$(YELLOW)Test $(1) Result Unknown$$(NC)" ; \
	fi
endef

$(foreach test,$(TESTS),$(eval $(call RUN_TEST_TEMPLATE,$(test))))

# Target to run all tests in parallel
run_all_tests:
	@$(MAKE) $(addprefix run_,$(TESTS)) -j$(shell nproc)
	$(MAKE) run_merge_coverage

create_top_py:
	@echo "from os import path" > $(SIM_PATH)/$(UVM_TEST)/top_module.py
	@echo "import sys" >> $(SIM_PATH)/$(UVM_TEST)/top_module.py
	@echo "sys.path.append(path.abspath('$(PWD)'))" >> $(SIM_PATH)/$(UVM_TEST)/top_module.py
	@echo "from test_lib import *" >> $(SIM_PATH)/$(UVM_TEST)/top_module.py

run_merge_coverage:
	@python3 $(PWD)/merge_cov.py $(SIM_PATH)

run_all_tests_multiple:
	@for i in $$(seq 1 $(NUM_ITERATIONS)); do \
		TAG="run$$i" ; \
		$(MAKE) run_all_tests SIM_TAG=$$TAG ; \
	done

clean_sim:
	@echo "Cleaning up..."
	@rm -rf $(PWD)/sim


# Target to clean directories under sim/ with a file named passed, including their parent directories up to sim/
clean_passed_dirs:
	@echo "Cleaning directories with a passed test and their parents up to sim..."
	@find $(PWD)/sim -type f -name passed | while read passed_file; do \
		dir=$$(dirname $$passed_file); \
		while [ "$$dir" != "$(PWD)/sim" -a "$$dir" != "$(PWD)" ]; do \
			echo "Cleaning $$dir..."; \
			rm -rf $$dir; \
			dir=$$(dirname $$dir); \
		done; \
	done